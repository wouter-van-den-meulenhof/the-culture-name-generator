import random
import string
import yaml
import json


class assets:
    """
    This class parses a config file and allows for randomizations of the
    assets contained therein.
    """

    with open("./data/assets.yml", "r") as assets_file:
        assets = yaml.safe_load(assets_file)["assets"]

    def format_return_value(input_object, output_type):
        """
        Converts the array of names generated into an appropriate return value.

        Parameters:
        input_object (list): List of names to format

        output_type (str): Format desired

        Returns:
        formatted output (str): List passed as string in the format desired
        """

        allowed_options = ["semicolon_delimited_string", "comma_delimited_string", "json"]
        if output_type in allowed_options:
            if output_type == "semicolon_delimited_string":
                formatted_output = (
                    "".join(str(f"{index};") for index in input_object)[:-1]
                )

            elif output_type == "comma_delimited_string":
                formatted_output = (
                    "".join(str(f"{index},") for index in input_object)[:-1]
                )

            else:
                formatted_output = (
                    json.dumps(input_object)
                )

            return formatted_output
        else:
            raise Exception(f"Only values of types: {allowed_options} allowed.")

    def generate_suffix(length):
        """
        Generates suffixes to make sure no name generated by this script
        wil generally be the same.

        Parameters:
        length (int): Amount of characters expected to be returned

        Returns:
        suffix (str): Random string composed of lowercase letters and numbers
        """

        selection = f"{string.ascii_lowercase}0123456789"
        suffix = "".join(random.choice(selection) for index in range(length))

        return suffix

    def generate_names(amount, desired_format):
        """
        Generates randomized names based on assets supplied.

        Parameters:
        amount (int): Amount of names expected to be returned

        assets (list): Asset on which to base these names that are to be returned.

        Returns:
        names (list): list of randomized names, based on assets supplied.
        """

        count_of_assets = len(assets.assets)
        if amount <= count_of_assets:
            names = []
            assets_used = []
            names_generated = 0
            while names_generated <= amount:
                suffix = assets.generate_suffix(5)
                asset_to_use = random.choice(assets.assets)
                if asset_to_use not in assets_used:
                    name = asset_to_use.lower().replace(" ", "-") + f"-{suffix}"
                    names.append(name)
                    assets_used.append(asset_to_use)
                    names_generated = (names_generated + 1)
                else:
                    continue

            names_in_desired_format = assets.format_return_value(names, desired_format)
            return names_in_desired_format

        else:
            raise Exception(f"Amount can not be higher than the amount of assets: {count_of_assets}")
